//File Name: StringSelection.java
//Instead of writing the file, I have read it as a String in the code and used it

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class StringSelectionProgram implements Comparator<String> {

	//This method is used to compare the length of the String
	@Override
	public int compare(String s1, String s2) {
		int len1 = s1.length();
		int len2 = s2.length();
		if(len1 < len2) {
			return 1;
		}
		else if(len1 > len2) {
			return -1;
		}
		return 0;
	}

	private static String REGEX = "[rstln aeiou RSTLN AEIOU]";

	private static String INPUT = "Two households, both alike in dignity, In fair Verona, where we lay our scene, From ancient grudge break to new mutiny, Where civil blood makes civil hands unclean. From forth the fatal loins of these two foes A pair of star-cross'd lovers take their life; Whose misadventured piteous overthrows Do with their death bury their parents' strife. The fearful passage of their death-mark'd love, And the continuance of their parents' rage, Which, but their children's end, nought could remove, Is now the two hours' traffic of our stage; The which if you with patient ears attend, What here shall miss, our toil shall strive to mend.";

	private static String REPLACE = "";

	public static void main (String[] args) throws java.lang.Exception
	{
		INPUT = INPUT.replaceAll("[-+.^:,]","");
		String[] Input2 = INPUT.split(" ");
		List<String> list = new ArrayList<String>();

		//Code to select the Acceptable word
		for(String index: Input2){
			//Compares the input string with Regex Pattern
			Pattern p = Pattern.compile(REGEX);
			Matcher m = p.matcher(index); 
			String index1 = m.replaceAll(REPLACE);
			String lowerCase = index1.toLowerCase();
			char characters[] = lowerCase.toCharArray();
			int countOfUniqueChars = index1.length();
			for (int i = 0; i < characters.length; i++) {
				if (i != lowerCase.indexOf(characters[i])) {
					countOfUniqueChars--;
				}
			}
			//Checks if there is only one other unique character present in String
			if(countOfUniqueChars==1){
				list.add(index);
			}
		}
		System.out.println("List of acceptable words:"+list);

		//Code to sort the list by the length of word
		Collections.sort(list, new StringSelectionProgram());
		System.out.println("List organized by the length of words:"+list);

		//Code to find word occurrence using a Map and determine the most common word
		Map<String, Integer> stringsCount = new HashMap<String, Integer>();
		for(String s: list)
		{
			Integer c = stringsCount.get(s);
			if(c == null){
				c = new Integer(0);	
			}
			c++;
			stringsCount.put(s,c);
		}
		System.out.println("Count of occurances of words:"+stringsCount);
		Map.Entry<String,Integer> mostRepeated = null;
		for(Map.Entry<String, Integer> e: stringsCount.entrySet())
		{
			if(mostRepeated == null || mostRepeated.getValue()<e.getValue()){
				mostRepeated = e;
			}
		}
		if(mostRepeated != null){
			System.out.println("Most common word: " + mostRepeated.getKey());    
		}
	}
}
